// CONFIG
// ======

// You can change the configuration here. To use your own config/variables file, just import your variables before using one of the mixins.

// Output combined state selectors like:
//    .block__element.is-active {}
// Set to false to output single, non-combined state modifiers:
//    .block__element--is-active {}
$combined-state-selectors: true !default;

// .block[separator]element:
$element-separator:        "__" !default;

// .block[separator]modifier:
$modifier-separator:       "_"  !default;

// The default prefix for state modifier selectors, will be combined with $modifier-separator:
$state-prefix:             "is" !default;

$namespace-separator:      "-"  !default;

$default-namespace:        "ui" !default;


// FUNCTION

@function str-index-or($heystack, $needle, $or) {
  $index: str-index($heystack, $needle);
  @if($index == null) {
    $index: $or;
  }
  @return $index;
}

@function extract-block-name($selector) {
  $selector: #{$selector};
  $inf: 9999999999;

  $dot-index: str-index-or($selector, ".", 1);
  $space-index: str-index-or($selector, " ", $inf);
  $modifier-index: str-index-or($selector, $modifier-separator, $inf);
  $element-index: str-index-or($selector, $element-separator, $inf);
  $pseudo-index: str-index-or($selector, ":", $inf);

  $sub : str-slice($selector, $dot-index + 1);
  $state-index: str-index-or($sub, ".", $inf) + 1;

  $min-index: min($space-index, $modifier-index, $element-index, $pseudo-index, $state-index);

  @return str-slice($selector, $dot-index + 1, $min-index - 1);
}

@function state($state, $prefix: $state-prefix) {
    @if $combined-state-selectors == true {
        @return '&.' + $prefix + '-' + $state;
    }
    @else {
        @return '&' + $modifier-separator + $prefix + '-' + $state;
    }
}

// namespace support
@function ns($block, $namespace: $default-namespace) {
    @return $namespace+$namespace-separator+$block;
}

@function el($name, $prefix: $element-separator) {
    @return '&' + $element-separator + $name;
}


// MIXINS
// ======

// @mixin block($name) {
//
//     .#{$name} {
//       @content;
//     }
// }

@mixin block($name, $modifier: "") {
    @if(not $name) {
      @error "You always need to specify the name of a block or an element!";
    }

    @if($modifier != "") {
      $modifier: #{$modifier-separator + $modifier};
    }
    #{"." + $name + $modifier} {
      @content;
    }
}


@mixin element($name, $inScope: false) {
    @if ($inScope) {
        $blockName: extract-block-name(&);
        #{"." + $blockName + $element-separator + $name} {
            @content
        }
    }
    @else {
        @at-root {
          &#{$element-separator}#{$name} {
            @content;
          }
        }
    }
}


@mixin modifier($name) {
  @at-root {
    &#{$modifier-separator}#{$name} {
      @content;
    }
  }
}


@mixin state($state, $prefix: $state-prefix) {
  @if $combined-state-selectors == true {
    @at-root {
      &.#{$prefix}-#{$state} {
        @content;
      }
    }
  }
  @else {
    @at-root {
      &#{$modifier-separator}#{$prefix}-#{$state} {
        @content;
      }
    }
  }
}




// ALIASES
// =======

@mixin component($name) {
  @include block($name) {
    @content;
  }
}

@mixin child($name) {
  @include element($name) {
    @content;
  }
}

@mixin subcomponent($name) {
  @include element($name) {
    @content;
  }
}

@mixin sub($name) {
  @include element($name) {
    @content;
  }
}
